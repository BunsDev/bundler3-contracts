diff -ruN Bundler.sol Bundler.sol
--- Bundler.sol
+++ Bundler.sol
@@ -15,10 +15,38 @@
     /* TRANSIENT STORAGE */
 
     /// @notice The initiator of the multicall transaction.
-    address public transient initiator;
+    //address public transient initiator;
+
+    function setInitiator(address _initiator) internal {
+        assembly ("memory-safe") {
+            // keccak256("Morpho Bundler Initiator Slot")
+            tstore(0x33a59cbcc71c90d612d5afca82f27022cd1319f49b953968504d8209c045bd1f, _initiator)
+        }
+    }
+
+    function initiator() public view returns (address _initiator) {
+        assembly ("memory-safe") {
+            // keccak256("Morpho Bundler Initiator Slot")
+            _initiator := tload(0x33a59cbcc71c90d612d5afca82f27022cd1319f49b953968504d8209c045bd1f)
+        }
+    }
 
     /// @notice Hash of the concatenation of the sender and calldata of the next call to `reenter`.
-    bytes32 public transient reenterHash;
+    //bytes32 public transient reenterHash;
+
+    function setReenterHash(bytes32 _reenterHash) internal {
+        assembly ("memory-safe") {
+            // keccak256("Morpho Bundler Reenter Hash Slot")
+            tstore(0xf76fe07d24a8fe20766ea4a3e6e9805bd23d7cda61e69a0df6c4774484a4adf8, _reenterHash)
+        }
+    }
+
+    function reenterHash() public view returns (bytes32 _reenterHash) {
+        assembly ("memory-safe") {
+            // keccak256("Morpho Bundler Reenter Hash Slot")
+            _reenterHash := tload(0xf76fe07d24a8fe20766ea4a3e6e9805bd23d7cda61e69a0df6c4774484a4adf8)
+        }
+    }
 
     /* EXTERNAL */
 
@@ -26,13 +54,13 @@
     /// @dev Locks the initiator so that the sender can be identified by other contracts.
     /// @param bundle The ordered array of calldata to execute.
     function multicall(Call[] calldata bundle) external payable {
-        require(initiator == address(0), ErrorsLib.AlreadyInitiated());
+        require(initiator() == address(0), ErrorsLib.AlreadyInitiated());
 
-        initiator = msg.sender;
+        setInitiator(msg.sender);
 
         _multicall(bundle);
 
-        initiator = address(0);
+        setInitiator(address(0));
     }
 
     /// @notice Executes a sequence of calls.
@@ -41,7 +69,7 @@
     /// @param bundle The ordered array of calldata to execute.
     function reenter(Call[] calldata bundle) external {
         require(
-            reenterHash == keccak256(bytes.concat(bytes20(msg.sender), keccak256(msg.data[4:]))),
+            reenterHash() == keccak256(bytes.concat(bytes20(msg.sender), keccak256(msg.data[4:]))),
             ErrorsLib.IncorrectReenterHash()
         );
         _multicall(bundle);
@@ -57,13 +85,13 @@
         for (uint256 i; i < bundle.length; ++i) {
             address to = bundle[i].to;
             bytes32 callbackHash = bundle[i].callbackHash;
-            if (callbackHash == bytes32(0)) reenterHash = bytes32(0);
-            else reenterHash = keccak256(bytes.concat(bytes20(to), callbackHash));
+            if (callbackHash == bytes32(0)) setReenterHash(bytes32(0));
+            else setReenterHash(keccak256(bytes.concat(bytes20(to), callbackHash)));
 
             (bool success, bytes memory returnData) = to.call{value: bundle[i].value}(bundle[i].data);
             if (!bundle[i].skipRevert && !success) UtilsLib.lowLevelRevert(returnData);
 
-            require(reenterHash == bytes32(0), ErrorsLib.MissingExpectedReenter());
+            require(reenterHash() == bytes32(0), ErrorsLib.MissingExpectedReenter());
         }
     }
 }
