// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity 0.8.21;

import {Signature} from "@morpho-blue/interfaces/IMorpho.sol";

import {ErrorsLib} from "./libraries/ErrorsLib.sol";
import {IERC20Permit} from "@openzeppelin/token/ERC20/extensions/IERC20Permit.sol";

import {BaseBundler} from "./BaseBundler.sol";

/// @title PermitBundler
/// @author Morpho Labs
/// @custom:contact security@morpho.xyz
/// @notice Bundler contract managing interactions with ERC20Permit compliant tokens.
abstract contract PermitBundler is BaseBundler {
    /// @notice Approves the given `amount` of `asset` from sender to be spent by this contract via Permit with the given `deadline` & EIP-712 `signature`.
    /// @notice Warning: should only be called via the bundler's `multicall` function.
    function permit(address asset, uint256 amount, uint256 deadline, Signature calldata signature) external payable {
        require(amount != 0, ErrorsLib.ZERO_AMOUNT);

        IERC20Permit(asset).permit(_initiator, address(this), amount, deadline, signature.v, signature.r, signature.s);
    }
}