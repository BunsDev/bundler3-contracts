  import { constructSimpleSDK, SwapSide } from '@paraswap/sdk';
  import axios from 'axios';

  import { defineChain, Hex } from "viem";


  const arbitrum = {
    id: 42161,
    rpc: 'https://virtual.arbitrum.rpc.tenderly.co/1680d12d-b83b-40e1-8c98-d403f6217504',
    USDCe: '0xff970a61a04b1ca14834a43f5de4533ebddb5cc8',
    DAI: '0xda10009cbd5d07dd0cecc66161fc93d7c9000da1',
    USDT: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9'
  }

  const ethereum = {
    id: 1,
    rpc: 'https://virtual.mainnet.rpc.tenderly.co/c3820e00-c632-4c69-b8c6-222ca1e5eafb',
    DAI: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
    USDT: '0xdAC17F958D2ee523a2206206994597C13D831ec7',
    USDC: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
  WETH: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
  WBTC: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599'
  }

  const chain = ethereum;

  // construct minimal SDK with fetcher only
  const paraSwapMin = constructSimpleSDK({chainId: chain.id, axios, version: '6.2'});
  // or
  // const paraSwapMin = constructSimpleSDK({chainId: 1, fetch: window.fetch, version: '5'});

  const GOOD_TEST_EOA = '0x0C6c882501891cd72bE30914D7b3f315aFB7dF2a';
  const BAD_TEST_EOA = '0x0c6c882501891cd72BE30914D7b3F315aFB7Df2B';
  const ETH = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';
  // const DAI = '0x6B175474E89094C44Da98b954EedeAC495271d0F';

  async function swapExample(doSell=false) {
    //                                     or any other signer/provider
    // const signer: JsonRpcSigner = ethers.Wallet.fromMnmemonic('__your_mnemonic__');
    // const senderAddress = signer.address;

    const srcToken = chain.USDC;
    const destToken = chain.WETH;


    let txParams;


    if (doSell) {

      const srcAmount = ''+3_000e6;
      const priceRoute = await paraSwapMin.swap.getRate({
        srcToken,
        destToken,
        amount: srcAmount,
        userAddress: GOOD_TEST_EOA,
        side: SwapSide.SELL,
        includeContractMethods:'swapExactAmountIn'
        // excludeContractMethods:'swapExactAmountIn'
      });

      const slippage = 20; // %
      const scale = ((100 + slippage) / 100);
      const destAmount = ''+(Number(priceRoute.destAmount) / scale).toFixed(0);

      console.log(JSON.stringify(priceRoute,null,2));

      txParams = await paraSwapMin.swap.buildTx(
      {
        srcToken,
        destToken,
        destAmount,
        srcAmount,
        priceRoute,
        userAddress: GOOD_TEST_EOA
      },
      {ignoreChecks: true}
    );
    } else {
    const destAmount = ''+1e18;

    const slippage = 20; // %
    const scale = ((100 + slippage) / 100);

      const priceRoute = await paraSwapMin.swap.getRate({
        srcToken,
        destToken,
        amount: destAmount,
        userAddress: GOOD_TEST_EOA,
        side: SwapSide.BUY,
        includeContractMethods:'swapExactAmountOut'
      // excludeContractMethods:'swapExactAmountOut'
      }
        );

      console.log(JSON.stringify(priceRoute,null,2));

      console.log("src amount    ",priceRoute.srcAmount);
      const srcAmount = ''+(Number(priceRoute.srcAmount) * scale).toFixed(0);
      console.log("new src amount",srcAmount);
      txParams = await paraSwapMin.swap.buildTx(
      {
        srcToken,
        destToken,
        destAmount,
        srcAmount,
        priceRoute,
        userAddress: GOOD_TEST_EOA
      },
      {ignoreChecks: true}
    );
  }

    // const transaction = {
    //   ...txParams,
    //   gasPrice: '0x' + new BigNumber(txParams.gasPrice).toString(16),
    //   gasLimit: '0x' + new BigNumber(5000000).toString(16),
    //   value: '0x' + new BigNumber(txParams.value).toString(16),
    // };
    // console.log(JSON.stringify(priceRoute));
    console.log("TX PARAMS");
    console.log(txParams);

    const hexValue = '0x' + (+txParams.value).toString(16);
    console.log("HEX VALUE",hexValue);

    // Axios vs fetch
    // https://medium.com/@johnnyJK/axios-vs-fetch-api-selecting-the-right-tool-for-http-requests-ecb14e39e285
    // Tenderly RPC cheat codes
    // https://docs.tenderly.co/virtual-testnets/admin-rpc#eth_sendtransaction
    // Paraswap SDK
    // https://github.com/paraswap/paraswap-sdk
    // Paraswap SDK Modules
    // https://github.com/paraswap/paraswap-sdk/blob/master/docs/md/modules.md#getratefunctions
    // Paraswap SDK / API example (online IDE)
    // https://codesandbox.io/p/sandbox/still-violet-zhtgzh?file=%2Fsrc%2Fparaswap_api.ts%3A161%2C9-161%2C18&from-embed
    // Paraswap API
    // https://developers.paraswap.network/api/build-parameters-for-transaction
    // API Examples
    // https://developers.paraswap.network/api/examples

    // Aave-Paraswap adapter hack
    // https://blog.solidityscan.com/aave-repay-adapter-hack-analysis-aafd234e15b9


    //

    // In data variable, replace first occurrence of 5af3107a4000 with 09184e72a000:

    // txParams.data = txParams.data.replace('5af3107a4000',
    //                                       '09184e72a000');
    // txParams.data = txParams.data.replace('5af3107a4000',
                                          // '5af3107a4000');
    // let from,to;
    // from = '4c4b40';
    // to = '3d0900';
    // txParams.data = txParams.data.replace(from,to);


    // console.log("Edited tx data:");
    // console.log(txParams);


    const resp = await axios.post(chain.rpc,
      {
        "id": 0,
        "jsonrpc": "2.0",
        "method": "eth_sendTransaction",
        "params": [{
          from: GOOD_TEST_EOA,
          to: txParams.to,
          value: hexValue,
          data: txParams.data
        }]
    });
    console.log("RESP");
    console.log(resp.data);

    // const virtual_arbitrum_one = defineChain({
    //   id: 42161,
    //   name: 'Virtual Arbitrum One',
    //   nativeCurrency: { name: 'VETH', symbol: 'vETH', decimals: 18 },
    //   rpcUrls: {
    //     default: { http: ['https://virtual.arbitrum.rpc.tenderly.co/1680d12d-b83b-40e1-8c98-d403f6217504'] }
    //   },
    //   blockExplorers: {
    //     default: {
    //       name: 'Tenderly Explorer',
    //       url: 'https://virtual.arbitrum.rpc.tenderly.co/0fec9b9f-c410-415f-b61d-7f5990fad1f0'
    //     }
    //   },
    // });


  }

  await swapExample(true);
  await swapExample(false);
